************************************************************
Для запуска проекта необходимо установить Go. 
Установка Go на Linux происходит с правами администратора. 
# dnf install golang

В дальнейшем запускаемая программа на Go может потребовать установку пакетов для дальнейшей работы. 
В большинстве случаев в этот момент работа осуществляется не в режиме администратора. Команда 
$ go get имя_пакета

Запуск программы на Go осуществляется при помощи команды
$ go run имя_файла.go
Далее можно создавать исполняемый файл при помощи команды
$ go build имя_файла.go

************************************************************
Здесь текст программы на Go содержится в файле gor.go.
В директории, где содержися файл gor.go надо выполнить команду
go mod init gor
это подключает зависимости

************************************************************
В директории, где лежит файл gor.go должен находится файл plot.html, который отвечает за визуализацию, 
то есть стартовая страница сервера. 

************************************************************
Установка R под Linux выполняется стандартно:
# dnf install R
Установка графической среды разработки RStudio:
# dnf install rstudio-desktop
# dnf install rstudio-server

Инсталляция в R необходимых пакетов
> install.packages("plumber")
> install.packages("ggplot2")

************************************************************
Загрузка файла plot.R
> r <- plumb("/home/… /plot.R")
Если команда выше выдает ошибку, то попробуйте загрузить plumber вручную
> library(plumber)
Если это не поможет, то установите в Fedora пакеты 
# dnf install libcurl-devel
# dnf install libsodium
# dnf install libsodium-devel
и попробуйте снова выполнить.
> r <- plumb("/home/… /plot.R")
Загрузится файл plot.R
Запустите сервер R с использованием порта 8000.
> r$run(port=8000)

************************************************************
Обратим внимание на файл plot.R

Осуществляем настройку CORS
Cross-origin resource sharing (CORS) — технология браузеров,
которая позволяет предоставить веб-странице доступ к ресурсам другого домена.
Настроен режим без ограничений.

Задаем размер возвращаемого изображения
h_ <- 14
w_ <- 14

Строка
#* @post /plotly
Сообщает о том, что запрос будет осуществляться, например к
http://localhost:8000/plotly методом POST.

Строка 
#* @serializer svg
Указывает на то, что мы будем использовать формат изображения SVG

************************************************************
Запуск из браузера: http://localhost:8080
Если программа была расположена на другом компьютере, то вместо localhost указывается адрес другого компьютера.
Нажать кнопку "Пуск"

************************************************************
В файле Go выполнение начинается с функции main()
func main() {
http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
    http.ServeFile(w, r, "plot.html")
})
http.HandleFunc("/getchartr", GetChartR)
fmt.Printf("Starting server get from R...\n")
  if err := http.ListenAndServe(":8080", nil); err != nil { 
  log.Fatal(err)
  }
}
Функция http.HandleFunc("/",... срабатывает при запросе http://localhost:8080
Функция http.HandleFunc("/getchartr", GetChartR) осуществляет постороение графика
Функциия http.ListenAndServe() сообщает веб-серверу о запуске и прослушивании порта 8080 локального хоста домена.
Функциия GetChartR выполняет запрос к серверу R:
response, err := http.PostForm("http://localhost:8000/plotly", data)



